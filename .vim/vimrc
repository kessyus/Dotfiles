" vimrc --- My Vim Setup
"
" Author: Kessyus Fófano <kessyus@gmail.com>
"
" Copyright (C) 2012-2021  Kessyus Fófano
"
" This program is free software: you can redistribute it and/or modify
" it under the terms of the GNU General Public License as published by
" the Free Software Foundation, either version 3 of the License, or
" (at your option) any later version.
"
" This program is distributed in the hope that it will be useful,
" but WITHOUT ANY WARRANTY; without even the implied warranty of
" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
" GNU General Public License for more details.
"
" You should have received a copy of the GNU General Public License
" along with this program.  If not, see <http://www.gnu.org/licenses/>.
"
" Commentary:
"
" Entry point for my Vim setup.  This module's main goal is to load
" Vim configuration the way I'm pleased to use it. =]
"
" Code:


" Search for plug.vim if doesn't exist then download it.
if empty(glob('~/.dotfiles/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Automatically install missing plugins on startup
autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif

" *** Plugins Start ******************
call plug#begin('~/.dotfiles/.vim/plugged')

" === Layout and Themes ==============
"Plug 'dracula/vim'
"Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline'
Plug 'ap/vim-css-color'
Plug 'kaicataldo/material.vim', { 'branch': 'main' }
Plug 'ryanoasis/vim-devicons'

" === Utility ========================
Plug 'jiangmiao/auto-pairs'
Plug 'unblevable/quick-scope'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'psliwka/vim-smoothie'
Plug 'beautify-web/js-beautify'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" === Conquer of Completion =========
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
  \ 'coc-tsserver',
  \ 'coc-json',
  \ 'coc-css',
  \ 'coc-solargraph',
  \ 'coc-html',
  \ 'coc-yaml',
  \ 'coc-prettier'
  \ ]

" === Programming Language Support ===
"
" === Javascript =====================
Plug 'pangloss/vim-javascript'
Plug 'moll/vim-node'
Plug 'jparise/vim-graphql'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
" === C# =============================
Plug 'OmniSharp/omnisharp-vim'
Plug 'OrangeT/vim-csharp'
" === Rust ========================== 
Plug 'rust-lang/rust.vim'

" === Git integrations ===============
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

call plug#end()
" *** Plugins End ********************


" Not vi compatible
set nocompatible

syntax on

colorscheme onedark
if !has('gui_running')
  set t_Co=256
endif

if (has("termguicolors"))
  set termguicolors
endif

" Keep iterm2 transparency
hi! Normal ctermbg=NONE guibg=NONE
hi! NonText ctermbg=NONE guibg=NONE guifg=NONE ctermfg=NONE


"
" Settings
"
set noerrorbells visualbell t_vb= " No beeps
set number                      " Show line numbers
set relativenumber              " Relative line numbers 
set backspace=indent,eol,start  " Makes backspace key more powerful.
set showcmd                     " Show me what I'm typing
set showmode                    " Show current mode.
set title                       " Show title of the file on term window
set wildmenu
set mouse+=a                     " Enable the use of the mouse
set shortmess+=A                " Don't show annoying msg when theres a swap file set shortmess+=c                " Don't pass messages to ins-completion-menu
set shortmess+=I                " Disable the default Vim startup message
set noswapfile                  " Don't use swapfile
set nobackup                    " Don't create annoying backup files
set nowritebackup
set splitright                  " Split vertical windows right to the current windows
set splitbelow                  " Split horizontal windows below to the current windows
set encoding=UTF-8              " Set default encoding to UTF-8
set autowrite                   " Automatically save before :next, :make etc.
set autochdir                   " Autochange working directory based on current file
set autoread                    " Automatically reread changed files without asking me anything
set laststatus=2                " Always show the status line at bottom"
set hidden
set ruler                       " Show the cursor position all the time
set incsearch                   " Shows the match while typing
set hlsearch                    " Highlight found searches
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not when search pattern contains upper case characters
set path+=**                    " Search down into subfolders
set wildmenu                    " Display all matching files when tab complete
set updatetime=300
set ttyfast
set conceallevel=0              " do not hide markdown
set wrap                        " Make Vim to handle long lines nicely.
set textwidth=79
set formatoptions=qrn1
set autoindent                  " Copy indent from current line to the next line
set smartindent                 " Reacts to the syntax of the code
set complete-=i
set showmatch                   " When a bracket is inserted show the match
set smarttab
set et
set tabstop=2                   " Number of spaces that a <Tab>
set shiftwidth=2                " Number of spaces to use for each step autoindent
set expandtab                   " Use the appropriate number of spaces
set splitbelow                  " Open new split panes to bottom
set splitright                  " Open new split panes to right
" Wrapping off whenever working on an HTML file
autocmd BufNewFile,BufRead *.html setlocal nowrap 


" Fzf Config
set rtp+=~/.fzf.zsh
set rtp+=/usr/local/opt/fzf
nnoremap <silent> <C-f> :Files<CR>
nnoremap <Leader>s :BLines<cr>
" Search inside files of the project folder
nnoremap <silent> \ :Rg<CR>
" Make :Rg ignore filenames
command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, {'options': '--delimiter : --nth 4..'}, <bang>0)
" Change vim to use ripgrep instead of grep
set grepprg=rg\ --vimgrep\ --smart-case\ --hidden\ --follow



" CoC Config

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')


" Formatters
au FileType javascript setlocal formatprg=prettier
au FileType javascript.jsx setlocal formatprg=prettier
au FileType typescript setlocal formatprg=prettier\ --parser\ typescript
au FileType html setlocal formatprg=js-beautify\ --type\ html
au FileType scss setlocal formatprg=prettier\ --parser\ css
au FileType css setlocal formatprg=prettier\ --parser\ css


" Airline config
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='powerlineish'


" Git Gutter
set signcolumn=yes
nmap ]h <Plug>(GitGutterNextHunk) "same as default
nmap [h <Plug>(GitGutterPrevHunk) "same as default
nmap ghs <Plug>(GitGutterStageHunk)
nmap ghu <Plug>(GitGutterUndoHunk)
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '✹'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '-'
let g:gitgutter_sign_modified_removed = '-'


" OmniSharp Config
let g:Omnisharp_start_server = 0
let g:Omnisharp_stop_server  = 0
let g:OmniSharp_host = "http://localhost:20001"
let g:ycm_csharp_server_port = 20001
let g:OmniSharp_timeout = 1
let g:OmniSharp_server_type = 'v1'
let g:OmniSharp_server_type = 'roslyn'


" Fugitive
set tags^=.git/tags;~


" Remap Personal Keyboard
map <Space> <Leader>

" Go to beginning or end of a line easier
nnoremap H ^
nnoremap L $

" Move current line up/down
" ˚ and ∆ are <Alt-k> and <Alt-j> respectly on my keyboard
nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv

" Useful for tabs
nnoremap <Tab> gT
nnoremap <S-Tab> gt
" Open file under cursor in new tab
nnoremap <leader>go <Esc><C-W>gF<CR>:tabm<CR>

" Competitive Programming
"autocmd filetype cpp nnoremap <F4> <Esc>:tabnew input.txt<CR>
"autocmd filetype cpp nnoremap <F5> <Esc>:w!<CR>:!clear; g++ % -o %:r -std=c++14 -Wall<CR>
"autocmd filetype cpp nnoremap <F6> <Esc>:!clear; ./%:r < input.txt<CR>

" Programming
" Run file
autocmd filetype javascript nnoremap <F5> <Esc>:w!<CR>:!clear; node %<CR>
autocmd filetype python nnoremap <F5> <Esc>:w!<CR>:!clear; python3 %<CR>
autocmd filetype go nnoremap <F5> <Esc>:w!<CR>:!clear; go build % && ./%:r<CR>
autocmd filetype java nnoremap <F5> <Esc>:w!<CR>:!clear; java %:r.class<CR>
autocmd filetype cpp nnoremap <F5> <Esc>:!clear; ./%:r<CR>
" Compile
autocmd filetype java nnoremap <F6> <Esc>:w!<CR>:!clear; javac %<CR>
autocmd filetype cpp nnoremap <F6> <Esc>:w!<CR>:!clear; g++ % -o %:r -std=c++17 -Wall;<CR>

" Direction keys for wrapped lines
nnoremap <silent> k gk
nnoremap <silent> j gj
nnoremap <silent> <Up> gk
nnoremap <silent> <Down> gj

" Tabs and Shift Tabs works like other editors
inoremap <S-tab> <c-d>
vnoremap <tab> >gv
vnoremap <S-Tab> <gv

" Unbind some useless/annoying default key bindings.
" 'Q' in normal mode enters Ex mode. You almost never want this.
nmap Q <Nop>
" Unbind for tmux
map <C-a> <Nop>
map <C-x> <Nop>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
